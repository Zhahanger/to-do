{"version":3,"sources":["app-header/Header.js","add-item/AddItem.js","allTasks/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","margin","width","display","textAlign","color","AddItem","className","type","placeholder","onClick","this","props","addTask","Component","Tasks","justifyContent","name","length","split","onSuccess","onDelete","App","state","tasksObject","document","getElementsByClassName","value","trim","push","setState","a","classList","contains","remove","add","tasks","splice","map","task","index","key","delete","success","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAceA,MAZf,WACI,OACI,yBAAKC,MAAO,CACRC,OAAS,SACTC,MAAM,OACNC,QAAQ,eACRC,UAAU,SACVC,MAAM,YACN,sCCGGC,G,6KARP,OACI,yBAAKC,UAAU,WACX,2BAAOC,KAAK,OAAOD,UAAU,aAAaE,YAAY,gBACtD,4BAAQC,QAASC,KAAKC,MAAMC,SAA5B,Y,GALMC,cCDhBd,EAAQ,CACVC,OAAO,MACPE,QAAQ,gBAsBGY,E,uKAhBP,OACI,oCACI,yBAAKR,UAAU,OAAOP,MAAO,CAACG,QAAQ,OAAOa,eAAe,kBACxD,uBAAGhB,MAAOA,GACVW,KAAKC,MAAMK,KAAKC,OAAS,GAAKP,KAAKC,MAAMK,KAAKE,MAAM,KAAK,GAAI,IAAOR,KAAKC,MAAMK,KAAKE,MAAM,KAAK,GAAK,IAAMR,KAAKC,MAAMK,KAAKE,MAAM,KAAK,GAAK,MAAQR,KAAKC,MAAMK,MAE7J,0BAAMV,UAAU,WACZ,4BAAQG,QAASC,KAAKC,MAAMQ,WAA5B,WACA,4BAAQV,QAASC,KAAKC,MAAMS,UAA5B,YAGR,wBAAInB,MAAM,c,GAdNY,aC6CLQ,E,4MA9CbC,MAAQ,CACNC,YAAc,CAAC,6J,wDAGf,GAAqE,KAAlEC,SAASC,uBAAuB,cAAc,GAAGC,MAAMC,OAAc,CACtE,IAAIJ,EAAcb,KAAKY,MAAMC,YAC/BA,EAAYK,KAAKJ,SAASC,uBAAuB,cAAc,GAAGC,OAClEhB,KAAKmB,SAAS,CACZN,gBAEFC,SAASC,uBAAuB,cAAc,GAAGC,MAAQ,M,8BAKnDI,GACHN,SAASC,uBAAuB,QAAQK,GAAGC,UAAUC,SAAS,YAC/DR,SAASC,uBAAuB,QAAQK,GAAGC,UAAUE,OAAO,YAE5DT,SAASC,uBAAuB,QAAQK,GAAGC,UAAUG,IAAI,c,6BAGtDJ,GACL,IAAIK,EAAQzB,KAAKY,MAAMC,YACvBY,EAAMC,OAAON,EAAE,GACfpB,KAAKmB,SAAS,CACZN,YAAcY,M,+BAGT,IAAD,OACN,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASvB,QAAS,WAAK,EAAKA,aAE1BF,KAAKY,MAAMC,YAAYc,KAAI,SAACC,EAAKC,GAC/B,OACE,kBAAC,EAAD,CAAOvB,KAAMsB,EAAME,IAAKD,EAAOnB,SAAU,WAAK,EAAKqB,OAAOF,IAASpB,UAAW,WAAK,EAAKuB,QAAQH,c,GAtC5F1B,aCOE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKnD,MAAO,CAACC,OAAO,WAEtBwB,SAAS2B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eee7a68b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header(){\r\n    return(\r\n        <div style={{\r\n            margin : '0 auto',\r\n            width:'100%',\r\n            display:\"inline-block\",\r\n            textAlign:'center',\r\n            color:'#6a8eae'}}>\r\n            <h1>ToDo</h1>\r\n        </div>\r\n    )\r\n}\r\nexport default Header; ","import React, { Component } from 'react';\r\nimport './addItem.css';\r\n\r\nclass AddItem extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"addItem\">\r\n                <input type=\"text\" className=\"main-input\" placeholder=\"//some task\"/>\r\n                <button onClick={this.props.addTask}>add</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddItem;","import React,{Component} from 'react';\r\n\r\nconst style = {\r\n    margin:'5px',\r\n    display:'inline-block'\r\n}\r\n\r\nclass Tasks extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <div className=\"task\" style={{display:\"flex\",justifyContent:\"space-between\"}}>\r\n                    <p style={style}>{\r\n                    this.props.name.length > 50 ? this.props.name.split(\" \")[0] +\" \" +  this.props.name.split(\" \")[1] + \" \" + this.props.name.split(\" \")[2] + \"...\" : this.props.name \r\n                }</p>\r\n                    <span className=\"buttons\">\r\n                        <button onClick={this.props.onSuccess}>success</button>\r\n                        <button onClick={this.props.onDelete} >delete</button>\r\n                    </span>\r\n                </div>\r\n                <hr width=\"100%\"/>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Tasks; ","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './app-header/Header'\nimport AddItem from './add-item/AddItem'\nimport Tasks from './allTasks/Tasks'\nclass App extends Component {\n  state = {\n    tasksObject : [\"Пригласить на собеседование\"]\n  }\n  addTask(){\n    if(document.getElementsByClassName('main-input')[0].value.trim() !== \"\"){\n      let tasksObject = this.state.tasksObject;\n    tasksObject.push(document.getElementsByClassName('main-input')[0].value);\n    this.setState({\n      tasksObject\n    });\n    document.getElementsByClassName('main-input')[0].value = \"\";\n\n    }\n    \n  }\n  success(a){\n    if(document.getElementsByClassName(\"task\")[a].classList.contains(\"overline\")){\n      document.getElementsByClassName(\"task\")[a].classList.remove(\"overline\")\n    } else {\n      document.getElementsByClassName(\"task\")[a].classList.add(\"overline\")\n    }\n  }\n  delete(a){\n    let tasks = this.state.tasksObject;\n    tasks.splice(a,1);\n    this.setState({\n      tasksObject : tasks\n    })\n  }\n  render(){\n    return (\n      <>\n        <Header/>\n        <AddItem addTask={()=>{this.addTask()}}/>\n        {\n          this.state.tasksObject.map((task,index)=>{\n            return (\n              <Tasks name={task} key={index} onDelete={()=>{this.delete(index)}} onSuccess={()=>{this.success(index)}}/>\n            ) })\n        }\n      </>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App style={{margin:'auto'}}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}